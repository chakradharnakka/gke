# 1. Create vpc peering

gcloud compute networks peerings create peer-ab \
    --network network-a \
    --peer-project PROJECT_ID \
    --peer-network network-b \
    --import-custom-routes \
    --export-custom-routes

gcloud compute networks peerings create peer-ba \
     --network network-b \
     --peer-project PROJECT_ID \
     --peer-network network-a \
     --import-custom-routes \
     --export-custom-routes

# 2. Configure MCS
gcloud services enable gkehub.googleapis.com --project PROJECT_ID
gcloud services enable dns.googleapis.com --project PROJECT_ID
gcloud services enable trafficdirector.googleapis.com --project PROJECT_ID
gcloud services enable cloudresourcemanager.googleapis.com --project PROJECT_ID

gcloud services enable multiclusterservicediscovery.googleapis.com \
    --project PROJECT_ID

gcloud alpha container hub multi-cluster-services enable \
    --project PROJECT_ID

    https://cloud.google.com/anthos/multicluster-management/connect/prerequisites#gke-cross-project
    It could happens that for the next steps you would need to issue next commands:
    GKE_PROJECT_ID=PROJECT_ID
    HUB_PROJECT_ID=PROJECT_ID
    HUB_PROJECT_NUMBER=$(gcloud projects describe "${HUB_PROJECT_ID}" --format "value(projectNumber)")
    gcloud projects add-iam-policy-binding "${HUB_PROJECT_ID}" \
    --member "serviceAccount:service-${HUB_PROJECT_NUMBER}@gcp-sa-gkehub.iam.gserviceaccount.com" \
    --role roles/gkehub.serviceAgent
    gcloud projects add-iam-policy-binding "${GKE_PROJECT_ID}" \
    --member "serviceAccount:service-${HUB_PROJECT_NUMBER}@gcp-sa-gkehub.iam.gserviceaccount.com" \
    --role roles/gkehub.serviceAgent

gcloud container hub memberships register na-northeast1 \
   --gke-cluster northamerica-northeast1/na-northeast1 \
   --enable-workload-identity
gcloud container hub memberships register us-central1 \
   --gke-cluster us-central1/us-central1 \
   --enable-workload-identity

gcloud projects add-iam-policy-binding PROJECT_ID \
    --member "serviceAccount:PROJECT_ID.svc.id.goog[gke-mcs/gke-mcs-importer]" \
    --role "roles/compute.networkViewer"


kubectl expose -n test deploy DEPLOY_NAME --port=9999 --target-port=9999 \
        --name=EXT_SVC_1 --type=LoadBalancer

kind: ServiceExport
apiVersion: net.gke.io/v1
metadata:
 namespace: test
 name: EXT_SVC_1

EXT_SVC_1.test.svc.clusterset.local


kubectl expose -n test deploy DEPLOY_NAME --port=9999 --target-port=9999 \
        --name=EXT_SVC_2 --type=LoadBalancer

kind: ServiceExport
apiVersion: net.gke.io/v1
metadata:
 namespace: test
 name: EXT_SVC_2

EXT_SVC_2.test.svc.clusterset.local